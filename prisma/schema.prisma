generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// TODO My mistake in this project: This should be a seperate model so the fields could be updated individually
type ProductSizes {
  s    Int @default(4)
  m    Int @default(3)
  l    Int @default(2)
  xl   Int @default(3)
  xxl  Int @default(2)
  xxxl Int @default(0)
}

model products {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  category    Category      @default(shirts)
  gender      Gender?
  collection  Collection?
  coverImage  String
  images      String[]
  description String?
  price       Int
  sold        Int           @default(0)
  sizes       ProductSizes?
  stock       Int?
  totalStock  Int
  isActive    Boolean       @default(true)
  slug        String        @unique
  createdAt   DateTime      @default(now())
  v           Int           @map("__v") @ignore
  cartItem    CartItem[]
  wishlist    Wishlist[]
  OrderItem   OrderItem[]
}

enum Category {
  shirts
  t_shirts
  hoodies
  joggers
  underwears
  jackets
  sweatshirts
  polo_shirts
  shorts
  pants
  bags
  phone_cases
  caps
  hats
}

enum Gender {
  male
  female
}

enum Collection {
  men
  women
  unisex
  kids
}

enum UserRole {
  USER
  ADMIN
  GUEST
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cart      Cart[]
  wishlist  Wishlist[]
  address   Address[]
  orders    Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// cart models
enum Size {
  s
  m
  l
  xl
  xxl
  xxxl
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String?
  userId    String?    @db.ObjectId
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  size      Size?
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, size])
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  product products @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Address {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  isDefault  Boolean @default(false)
  firstName  String
  lastName   String
  address    String
  optional   String?
  country    String
  state      String
  city       String
  postalCode String
  phone      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  pending
  confirmed
  delivered
  cancelled
}

enum ShippingMethod {
  standard
  express
}

enum PaymentMethod {
  bank_transfer
  card
  pay_on_delivery
}

// New types for Order model
// type OrderItem {
//   productId  String
//   name       String
//   coverImage String
//   price      Int
//   quantity   Int
//   size       Size?
// }

type OrderAddress {
  firstName  String
  lastName   String
  address    String
  optional   String?
  country    String
  state      String
  city       String
  postalCode String
  phone      String
}

model Order {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  referenceId     String         @unique
  orderId         String         @unique
  contactEmail    String?
  userId          String?        @db.ObjectId
  items           OrderItem[]
  currency        String         @default("NGN")
  status          Status         @default(pending)
  isPaid          Boolean        @default(false)
  shippingMethod  ShippingMethod
  paymentMethod   PaymentMethod
  quantity        Int
  shippingFee     String // i can also store te shipping and total amount as number also
  totalAmount     String
  rateToUsd       Float // used to determine the rate at the time of purchased
  shippingAddress OrderAddress
  billingAddress  OrderAddress

  createdAt   DateTime  @default(now())
  confirmedAt DateTime?
  deliveredAt DateTime?
  cancelledAt DateTime?
  updatedAt   DateTime  @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int
  size      Size?
  price     Int

  order   Order    @relation(fields: [orderId], references: [id])
  product products @relation(fields: [productId], references: [id])

  @@unique([orderId, productId, size])
}

model Settings {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  standardShipping Int
  expressShipping  Int
  baseCurrency     String @default("USD")

  // Conversion Rates
  NGN Float
  GBP Float
  CAD Float
  GHS Float
  EUR Float
  USD Int
}
